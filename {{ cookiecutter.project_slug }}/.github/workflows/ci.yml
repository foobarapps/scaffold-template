name: CI/CD

on:
  push:
    branches:
      - main
      - master

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black import-linter

      - name: Run linter
        run: ruff check --output-format=github .

      - name: Run code formatting check
        run: black --check .

      - name: Run import linter
        run: lint-imports

  build:
    runs-on: ubuntu-latest
    needs: linting
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    runs-on: ubuntu-latest
    needs: build
    env:
      IMAGE_TAG: tests
      SECRET_KEY: abcd
      DOMAIN: localhost
      DATABASE_URL: postgresql://user:password@db/development
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          load: true
          tags: tests
          target: dev
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run static type check
        run: docker compose run app mypy .

      - name: Run tests
        run: docker compose run app pytest

  deploy:
    runs-on: ubuntu-latest
    needs: test
    env:
      SERVER_IP_ADDRESS: ${{ vars.SERVER_IP_ADDRESS }}
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
    steps:
      - uses: actions/checkout@v4

      - name: Set up SSH keys and known hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${SERVER_IP_ADDRESS} >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK
          ssh-add - <<< "${SSH_PRIVATE_KEY}"

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_PASSWORD }}

      - name: Deploy
        env:
          IMAGE_TAG: ghcr.io/${{ github.repository }}:${{ github.sha }}
          DOMAIN: ${{ vars.DOMAIN }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          MAIL_DEFAULT_SENDER: ${{ vars.MAIL_DEFAULT_SENDER }}
          MAIL_HOSTNAME: ${{ vars.MAIL_HOSTNAME }}
          MAIL_PORT: ${{ vars.MAIL_PORT }}
          MAIL_USERNAME: ${{ vars.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          ACME_EMAIL: ${{ vars.ACME_EMAIL }}
        run: |
          STACK_NAME=$(basename "$PWD")
          export DOCKER_HOST="ssh://ubuntu@${SERVER_IP_ADDRESS}"
          docker stack deploy --with-registry-auth -c compose.yml -c compose.prod.yml $STACK_NAME
          # Since Docker 26, `docker stack deploy` has a `--detach=false` option which waits until all the services are updated and healthy.
          # However, it successfully returns 0 even if one of the services is rolled back.
          # So we have to run `docker service inspect` to check whether the update status is "completed" or rolled back.
          # However, in many cases, for some reason the update status is still "updating" even when `docker stack deploy --detach=false` finished.
          # So we need to check the status in a loop anyway. So we don't have to use the `--detach` option in the first place and just check in the loop.
          ./scripts/docker-stack-wait.sh $STACK_NAME
